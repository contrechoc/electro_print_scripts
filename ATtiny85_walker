//script for electro prints - exhibition Galerie de Maaskoe Rotterdam
//2020 Beam Contrechoc
//ATtiny85

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
#include <avr/power.h>
#endif

#define PIN 0

Adafruit_NeoPixel strip = Adafruit_NeoPixel(24, PIN, NEO_GRBW);

int counter = 24;

void setup() {

 // Serial.begin(9600);

  strip.begin();
  strip.show(); // Initialize all pixels to 'off'

  SUN();
  /*
    goround();
    delay(5000);
  */
  irregularStep(strip.Color(255, 0, random(10)),  0) ;
  colorWipe(strip.Color(0, 0, 0), 0);//black
  delay(5000);


}

void goround() {
  int r1 = random(2) * random(255);
  int r2 = random(2) * random(255);
  int r3 = random(2) * random(255);
  colorSpace(strip.Color(r1, r2, r3), 100);
  r1 = random(2) * random(255);
  r2 = random(2) * random(255);
  r3 = random(2) * random(255);
  colorSpace(strip.Color(r1, r2, r3), 100);

  colorWipe(strip.Color(0, 0, 0), 0);//black
  /*
    colorSpace(strip.Color(255, 255, 0), 100);
    colorWipe(strip.Color(0, 0, 0), 0);//black
    colorSpace(strip.Color(0, 255, 0), 100);
    colorWipe(strip.Color(0, 0, 0), 0);//black
  */

}

void loop() {

  colorWipe(strip.Color(0, 0, 0), 0); // black
  colorStep(strip.Color(5, 0, random(10)),  0);
  delay(100); colorWipe(strip.Color(0, 0, 0), 0); // black
  counter--;


  colorStep(strip.Color(5, random(10), 0),  1); delay(100); colorWipe(strip.Color(0, 0, 0), 0); // black
  delay(800 + random(800));

  if ( random(25) == 3 )
  {
    irregularStep(strip.Color(random(10), random(10), random(10)),  0) ;
  }

  if ( random(25) == 2 )
  {
    theaterChase(strip.Color(random(10), random(10), random(10)), 100);
  }

  if ( random(25) == 2 )
  {
    rainbow(5 + random(10));
  }

  if ( random(25) == 1 )
  {
    goround();
  }

  if ( random(25) == 0 )
  {
    SUN();


  }
}
void SUN() {
  colorWipe(strip.Color(0, 0, 0), 0);
  for ( int sun = 0; sun < 55 ; sun += 10)
  {
    colorWipe(strip.Color(sun, sun / 2, 0), 0);
    delay(5 + random(15));
  }
  delay(1000);
  for ( int sun = 55; sun > 0 ; sun -= 5)
  {
    colorWipe(strip.Color(sun, sun / 2, 0), 0);
    delay(5 + random(15));
  }
  colorWipe(strip.Color(0,0,0), 0);
  delay(1000);


}
// Fill the dots one after the other with a color
void colorStep(uint32_t c,  int stepStart) {
  for (uint16_t i = stepStart; i < strip.numPixels(); i += 2) {
    strip.setPixelColor(i, c);
  }
  strip.show();
}

void irregularStep(uint32_t c,  int stepStart) {

  int stepper[24];
  for ( int k = 0; k < 25; k += 1)
  {
    stepper[k] = 1;
  }

  uint32_t c1 = strip.Color(55, random(10), random(10));
  uint32_t c2 = strip.Color(  random(10), 55, random(10));
/*
  for ( int k = 0; k < 25; k += 1)
  {
    Serial.print( stepper[k] );
    Serial.print(" ");
  }
  */

  int numberFeet = 12;
  while ( numberFeet > 1 )
  {
    int h = 2 * random (14);
   // Serial.print( h ); Serial.print(" "); Serial.print( h + 1); Serial.print(" "); Serial.println(stepper[h]); Serial.print(" ");
    if ( stepper[h] == 1)
    {
      strip.setPixelColor(h, c1); strip.show(); delay(100);
      numberFeet--;
     // Serial.println( numberFeet ); Serial.print(" ");
      delay(500 + random(550));

      strip.setPixelColor(h + 1, c2); strip.show(); delay(20); strip.setPixelColor(h + 1, strip.Color(0, 0, 0)); strip.show();
      strip.setPixelColor(h, strip.Color(0, 0, 0)); strip.show();
      stepper[h] = 0;
      stepper[h - 1] = 0;
      delay(500 + random(550));

    }
  }

}

// Fill the dots one after the other with a color
void colorWipe(uint32_t c, uint8_t wait) {

  for (uint16_t i = strip.numPixels(); i < -1; i--) {

    strip.setPixelColor(i, c);
    strip.show();
    delay(wait);
  }
}

void colorSpace(uint32_t c, uint8_t wait) {

  for (uint16_t i = 25; i < -1; i--) {
    //colorWipe(strip.Color(0, 0, 0), 0); // black
    strip.setPixelColor(i, c);
    strip.setPixelColor(i - 1, c);
    strip.show();
    delay(wait);
    strip.setPixelColor(i, strip.Color(0, 0, 0));
    strip.setPixelColor(i - 1, strip.Color(0, 0, 0));
    strip.show();
  }
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for (j = 0; j < 256; j++) {
    for (i = 0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

// Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait) {
  uint16_t i, j;

  for (j = 0; j < 256 * 5; j++) { // 5 cycles of all colors on wheel
    for (i = 0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

//Theatre-style crawling lights.
void theaterChase(uint32_t c, uint8_t wait) {
  for (int j = 0; j < 10; j++) { //do 10 cycles of chasing
    for (int q = 0; q < 3; q++) {
      for (uint16_t i = 0; i < strip.numPixels(); i = i + 3) {
        strip.setPixelColor(i + q, c);  //turn every third pixel on
      }
      strip.show();

      delay(wait);

      for (uint16_t i = 0; i < strip.numPixels(); i = i + 3) {
        strip.setPixelColor(i + q, 0);      //turn every third pixel off
      }
    }
  }
}

//Theatre-style crawling lights with rainbow effect
void theaterChaseRainbow(uint8_t wait) {
  for (int j = 0; j < 256; j++) {   // cycle all 256 colors in the wheel
    for (int q = 0; q < 3; q++) {
      for (uint16_t i = 0; i < strip.numPixels(); i = i + 3) {
        strip.setPixelColor(i + q, Wheel( (i + j) % 255)); //turn every third pixel on
      }
      strip.show();

      delay(wait);

      for (uint16_t i = 0; i < strip.numPixels(); i = i + 3) {
        strip.setPixelColor(i + q, 0);      //turn every third pixel off
      }
    }
  }
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if (WheelPos < 85) {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if (WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}
