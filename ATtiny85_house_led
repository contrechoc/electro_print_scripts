//script for electro prints - exhibition Galerie de Maaskoe Rotterdam
//2020 Beam Contrechoc
//ATtiny85

int led1 = 0;
#define PIN_OUT        1
#define UNIT_LENGTH 120

long timer;
String morseWord = "";
const char *nameString = "home";

void setup() {

  pinMode(led1, OUTPUT);
}

void loop() {

  if ( timer < millis())
  {
    int h = random (5);
    if ( h == 0 )
    { //morsecode
      morseWord = encode( nameString );
      doMorseCode();
    } else if ( h == 1 )
    { //fade
      for (int fadeValue = 0 ; fadeValue <= 255; fadeValue += 5) {
        analogWrite(led1, fadeValue);
        delay(10);
      }
      for (int fadeValue = 255 ; fadeValue >= 0; fadeValue -= 5) {
        analogWrite(led1, fadeValue);
        delay(10);
      }
    }
    else if ( h == 2 )
    {
      int j = random(10) + 2;
      for (int i = 0; i < j ; i++)
      {
        digitalWrite(led1, HIGH);
        delay(random(500));
        digitalWrite(led1, LOW);
        delay(random(500));
      }
    }
    else if ( h == 3 )
    {
      int j = random(4) + 2;
      for (int i = 0; i < j ; i++)
      {
        digitalWrite(led1, HIGH);
        delay(100);
        digitalWrite(led1, LOW);
        delay(100);
        digitalWrite(led1, HIGH);
        delay(100);
        digitalWrite(led1, LOW);
        delay(100);
        delay(1000+ random(1000));
      }
    }

    else if ( h == 4 )
    {
      int j = random(4) + 2;
      for (int i = 0; i < j ; i++)
      {
        digitalWrite(led1, HIGH);
        delay(50);
        digitalWrite(led1, LOW);
        delay(50);
        digitalWrite(led1, HIGH);
        delay(50);
        digitalWrite(led1, LOW);
        delay(50);
        digitalWrite(led1, HIGH);
        delay(50);
        digitalWrite(led1, LOW);
        delay(50);
        delay(500 + random (500));
      }
    }
    timer = millis() + 1000 + random(2000);
  }


}

int iMorseCodeCounter = 0;
//Build a struct with the morse code mapping
static const struct {
  const char letter, *code;
}
MorseMap[] =
{
  {
    'A', ".-"
  }
  ,
  {
    'B', "-..."
  }
  ,
  {
    'C', "-.-."
  }
  ,
  {
    'D', "-.."
  }
  ,
  {
    'E', "."
  }
  ,
  {
    'F', "..-."
  }
  ,
  {
    'G', "--."
  }
  ,
  {
    'H', "...."
  }
  ,
  {
    'I', ".."
  }
  ,
  {
    'J', ".---"
  }
  ,
  {
    'K', "-.-"
  }
  ,
  {
    'L', ".-.."
  }
  ,
  {
    'M', "--"
  }
  ,
  {
    'N', "-."
  }
  ,
  {
    'O', "---"
  }
  ,
  {
    'P', ".--."
  }
  ,
  {
    'Q', "--.-"
  }
  ,
  {
    'R', ".-."
  }
  ,
  {
    'S', "..."
  }
  ,
  {
    'T', "-"
  }
  ,
  {
    'U', "..-"
  }
  ,
  {
    'V', "...-"
  }
  ,
  {
    'W', ".--"
  }
  ,
  {
    'X', "-..-"
  }
  ,
  //{ 'Y', "-.--" },
  //{ 'Z', "--.." },
  {
    ' ', "     "
  }
  , //Gap between word, seven units

};


String encode( const char *string)
{
  size_t i, j;
  String morseWord = "";

  for ( i = 0; string[i]; ++i )
  {
    for ( j = 0; j < sizeof MorseMap / sizeof * MorseMap; ++j )
    {
      if ( toupper(string[i]) == MorseMap[j].letter )
      {
        morseWord += MorseMap[j].code;
        break;
      }
    }
    morseWord += " "; //Add tailing space to seperate the chars
  }

  return morseWord;
}


void doMorseCode() {

  while ( iMorseCodeCounter <= morseWord.length())
  {
    switch ( morseWord[iMorseCodeCounter] )
    {
      case '.': //dit
        PORTB |= (1 << PIN_OUT);
        delay( UNIT_LENGTH );
        PORTB &= ~(1 << PIN_OUT);
        delay( UNIT_LENGTH );

        break;

      case '-': //dah
        PORTB |= (1 << PIN_OUT);
        delay( UNIT_LENGTH * 5 );
        PORTB &= ~(1 << PIN_OUT);
        delay( UNIT_LENGTH );

        break;

      case ' ': //gap
        delay( UNIT_LENGTH );

        break;
    }
    iMorseCodeCounter++;
  }
  iMorseCodeCounter = 0;
}
